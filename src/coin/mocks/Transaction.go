// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import core "github.com/fibercrypto/fibercryptowallet/src/core"
import mock "github.com/stretchr/testify/mock"

// Transaction is an autogenerated mock type for the Transaction type
type Transaction struct {
	mock.Mock
}

// AddSignature provides a mock function with given fields: index, signature
func (_m *Transaction) AddSignature(index uint64, signature []byte) error {
	ret := _m.Called(index, signature)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, []byte) error); ok {
		r0 = rf(index, signature)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Clone provides a mock function with given fields:
func (_m *Transaction) Clone() (interface{}, error) {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ComputeFee provides a mock function with given fields: ticker
func (_m *Transaction) ComputeFee(ticker string) (uint64, error) {
	ret := _m.Called(ticker)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(string) uint64); ok {
		r0 = rf(ticker)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ticker)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetId provides a mock function with given fields:
func (_m *Transaction) GetId() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetInputs provides a mock function with given fields:
func (_m *Transaction) GetInputs() []core.TransactionInput {
	ret := _m.Called()

	var r0 []core.TransactionInput
	if rf, ok := ret.Get(0).(func() []core.TransactionInput); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]core.TransactionInput)
		}
	}

	return r0
}

// GetOutputs provides a mock function with given fields:
func (_m *Transaction) GetOutputs() []core.TransactionOutput {
	ret := _m.Called()

	var r0 []core.TransactionOutput
	if rf, ok := ret.Get(0).(func() []core.TransactionOutput); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]core.TransactionOutput)
		}
	}

	return r0
}

// GetStatus provides a mock function with given fields:
func (_m *Transaction) GetStatus() core.TransactionStatus {
	ret := _m.Called()

	var r0 core.TransactionStatus
	if rf, ok := ret.Get(0).(func() core.TransactionStatus); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(core.TransactionStatus)
	}

	return r0
}

// GetTimestamp provides a mock function with given fields:
func (_m *Transaction) GetTimestamp() core.Timestamp {
	ret := _m.Called()

	var r0 core.Timestamp
	if rf, ok := ret.Get(0).(func() core.Timestamp); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(core.Timestamp)
	}

	return r0
}

// IsFullySigned provides a mock function with given fields:
func (_m *Transaction) IsFullySigned() (bool, error) {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SupportedAssets provides a mock function with given fields:
func (_m *Transaction) SupportedAssets() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// VerifySigned provides a mock function with given fields:
func (_m *Transaction) VerifySigned() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VerifyUnsigned provides a mock function with given fields:
func (_m *Transaction) VerifyUnsigned() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
