// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *Storage) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteValue provides a mock function with given fields: key
func (_m *Storage) DeleteValue(key uint64) error {
	ret := _m.Called(key)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetConfig provides a mock function with given fields:
func (_m *Storage) GetConfig() map[string]string {
	ret := _m.Called()

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

// GetValue provides a mock function with given fields: key
func (_m *Storage) GetValue(key uint64) (interface{}, error) {
	ret := _m.Called(key)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(uint64) interface{}); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertConfig provides a mock function with given fields: _a0
func (_m *Storage) InsertConfig(_a0 map[string]string) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(map[string]string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertValue provides a mock function with given fields: value
func (_m *Storage) InsertValue(value interface{}) (uint64, error) {
	ret := _m.Called(value)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(interface{}) uint64); ok {
		r0 = rf(value)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListValues provides a mock function with given fields:
func (_m *Storage) ListValues() (map[uint64]interface{}, error) {
	ret := _m.Called()

	var r0 map[uint64]interface{}
	if rf, ok := ret.Get(0).(func() map[uint64]interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[uint64]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Path provides a mock function with given fields:
func (_m *Storage) Path() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// UpdateValue provides a mock function with given fields: key, newValue
func (_m *Storage) UpdateValue(key uint64, newValue interface{}) error {
	ret := _m.Called(key, newValue)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, interface{}) error); ok {
		r0 = rf(key, newValue)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
