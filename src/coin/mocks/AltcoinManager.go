// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import core "github.com/fibercrypto/FiberCryptoWallet/src/core"
import mock "github.com/stretchr/testify/mock"

// AltcoinManager is an autogenerated mock type for the AltcoinManager type
type AltcoinManager struct {
	mock.Mock
}

// AttachSignService provides a mock function with given fields: _a0
func (_m *AltcoinManager) AttachSignService(_a0 core.TxnSigner) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(core.TxnSigner) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DescribeAltcoin provides a mock function with given fields: ticker
func (_m *AltcoinManager) DescribeAltcoin(ticker string) (core.AltcoinMetadata, bool) {
	ret := _m.Called(ticker)

	var r0 core.AltcoinMetadata
	if rf, ok := ret.Get(0).(func(string) core.AltcoinMetadata); ok {
		r0 = rf(ticker)
	} else {
		r0 = ret.Get(0).(core.AltcoinMetadata)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(ticker)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// EnumerateSignServices provides a mock function with given fields:
func (_m *AltcoinManager) EnumerateSignServices() core.TxnSignerIterator {
	ret := _m.Called()

	var r0 core.TxnSignerIterator
	if rf, ok := ret.Get(0).(func() core.TxnSignerIterator); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.TxnSignerIterator)
		}
	}

	return r0
}

// ListRegisteredPlugins provides a mock function with given fields:
func (_m *AltcoinManager) ListRegisteredPlugins() []core.AltcoinPlugin {
	ret := _m.Called()

	var r0 []core.AltcoinPlugin
	if rf, ok := ret.Get(0).(func() []core.AltcoinPlugin); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]core.AltcoinPlugin)
		}
	}

	return r0
}

// LookupAltcoinPlugin provides a mock function with given fields: ticker
func (_m *AltcoinManager) LookupAltcoinPlugin(ticker string) (core.AltcoinPlugin, bool) {
	ret := _m.Called(ticker)

	var r0 core.AltcoinPlugin
	if rf, ok := ret.Get(0).(func(string) core.AltcoinPlugin); ok {
		r0 = rf(ticker)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.AltcoinPlugin)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(ticker)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// LookupSignService provides a mock function with given fields: _a0
func (_m *AltcoinManager) LookupSignService(_a0 core.UID) core.TxnSigner {
	ret := _m.Called(_a0)

	var r0 core.TxnSigner
	if rf, ok := ret.Get(0).(func(core.UID) core.TxnSigner); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.TxnSigner)
		}
	}

	return r0
}

// RegisterAltcoin provides a mock function with given fields: info, plugin
func (_m *AltcoinManager) RegisterAltcoin(info core.AltcoinMetadata, plugin core.AltcoinPlugin) {
	_m.Called(info, plugin)
}

// RegisterPlugin provides a mock function with given fields: p
func (_m *AltcoinManager) RegisterPlugin(p core.AltcoinPlugin) {
	_m.Called(p)
}

// RemoveSignService provides a mock function with given fields: _a0
func (_m *AltcoinManager) RemoveSignService(_a0 core.TxnSigner) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(core.TxnSigner) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SignServicesForTxn provides a mock function with given fields: _a0, _a1
func (_m *AltcoinManager) SignServicesForTxn(_a0 core.Wallet, _a1 core.Transaction) core.TxnSignerIterator {
	ret := _m.Called(_a0, _a1)

	var r0 core.TxnSignerIterator
	if rf, ok := ret.Get(0).(func(core.Wallet, core.Transaction) core.TxnSignerIterator); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.TxnSignerIterator)
		}
	}

	return r0
}
