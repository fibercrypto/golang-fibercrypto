// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import core "github.com/fibercrypto/fibercryptowallet/src/core"
import mock "github.com/stretchr/testify/mock"

// CryptoAccount is an autogenerated mock type for the CryptoAccount type
type CryptoAccount struct {
	mock.Mock
}

// GetBalance provides a mock function with given fields: ticker
func (_m *CryptoAccount) GetBalance(ticker string) (uint64, error) {
	ret := _m.Called(ticker)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(string) uint64); ok {
		r0 = rf(ticker)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ticker)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAssets provides a mock function with given fields:
func (_m *CryptoAccount) ListAssets() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// ListPendingTransactions provides a mock function with given fields:
func (_m *CryptoAccount) ListPendingTransactions() (core.TransactionIterator, error) {
	ret := _m.Called()

	var r0 core.TransactionIterator
	if rf, ok := ret.Get(0).(func() core.TransactionIterator); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.TransactionIterator)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTransactions provides a mock function with given fields:
func (_m *CryptoAccount) ListTransactions() core.TransactionIterator {
	ret := _m.Called()

	var r0 core.TransactionIterator
	if rf, ok := ret.Get(0).(func() core.TransactionIterator); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.TransactionIterator)
		}
	}

	return r0
}

// ScanUnspentOutputs provides a mock function with given fields:
func (_m *CryptoAccount) ScanUnspentOutputs() core.TransactionOutputIterator {
	ret := _m.Called()

	var r0 core.TransactionOutputIterator
	if rf, ok := ret.Get(0).(func() core.TransactionOutputIterator); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.TransactionOutputIterator)
		}
	}

	return r0
}
