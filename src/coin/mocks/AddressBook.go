// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import core "github.com/fibercrypto/fibercryptowallet/src/core"
import mock "github.com/stretchr/testify/mock"

// AddressBook is an autogenerated mock type for the AddressBook type
type AddressBook struct {
	mock.Mock
}

// Authenticate provides a mock function with given fields: password
func (_m *AddressBook) Authenticate(password string) error {
	ret := _m.Called(password)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChangeSecurity provides a mock function with given fields: NewSecType, oldPassword, newPassword
func (_m *AddressBook) ChangeSecurity(NewSecType int, oldPassword string, newPassword string) error {
	ret := _m.Called(NewSecType, oldPassword, newPassword)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string, string) error); ok {
		r0 = rf(NewSecType, oldPassword, newPassword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *AddressBook) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteContact provides a mock function with given fields: id
func (_m *AddressBook) DeleteContact(id uint64) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetContact provides a mock function with given fields: id
func (_m *AddressBook) GetContact(id uint64) (core.Contact, error) {
	ret := _m.Called(id)

	var r0 core.Contact
	if rf, ok := ret.Get(0).(func(uint64) core.Contact); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.Contact)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSecType provides a mock function with given fields:
func (_m *AddressBook) GetSecType() (int, error) {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStorage provides a mock function with given fields:
func (_m *AddressBook) GetStorage() core.Storage {
	ret := _m.Called()

	var r0 core.Storage
	if rf, ok := ret.Get(0).(func() core.Storage); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.Storage)
		}
	}

	return r0
}

// HasInit provides a mock function with given fields:
func (_m *AddressBook) HasInit() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Init provides a mock function with given fields: secType, password
func (_m *AddressBook) Init(secType int, password string) error {
	ret := _m.Called(secType, password)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string) error); ok {
		r0 = rf(secType, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertContact provides a mock function with given fields: contact
func (_m *AddressBook) InsertContact(contact core.Contact) (uint64, error) {
	ret := _m.Called(contact)

	var r0 uint64
	if rf, ok := ret.Get(0).(func(core.Contact) uint64); ok {
		r0 = rf(contact)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(core.Contact) error); ok {
		r1 = rf(contact)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsOpen provides a mock function with given fields:
func (_m *AddressBook) IsOpen() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ListContact provides a mock function with given fields:
func (_m *AddressBook) ListContact() ([]core.Contact, error) {
	ret := _m.Called()

	var r0 []core.Contact
	if rf, ok := ret.Get(0).(func() []core.Contact); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]core.Contact)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateContact provides a mock function with given fields: id, contact
func (_m *AddressBook) UpdateContact(id uint64, contact core.Contact) error {
	ret := _m.Called(id, contact)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, core.Contact) error); ok {
		r0 = rf(id, contact)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
