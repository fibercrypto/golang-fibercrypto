// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import core "github.com/fibercrypto/FiberCryptoWallet/src/core"
import mock "github.com/stretchr/testify/mock"

// MultiPool is an autogenerated mock type for the MultiPool type
type MultiPool struct {
	mock.Mock
}

// CreateSection provides a mock function with given fields: _a0, _a1
func (_m *MultiPool) CreateSection(_a0 string, _a1 core.PooledObjectFactory) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, core.PooledObjectFactory) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSection provides a mock function with given fields: _a0
func (_m *MultiPool) GetSection(_a0 string) (core.MultiPoolSection, error) {
	ret := _m.Called(_a0)

	var r0 core.MultiPoolSection
	if rf, ok := ret.Get(0).(func(string) core.MultiPoolSection); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.MultiPoolSection)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSections provides a mock function with given fields:
func (_m *MultiPool) ListSections() ([]string, error) {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
