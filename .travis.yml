sudo: required
language: go
go:
- 1.12.6
services:
- docker
- xvfb
go_import_path: github.com/fibercrypto/fibercryptowallet
cache:
  directories:
  - "$GOPATH/src/github.com/therecipe"
  - "$GOPATH/bin"
env:
  global:
  - XARGS="-screen 0 1024x768x24"
matrix:
  include:
  - stage: RPI
    if: branch = release*$
    install:
    - export D_ARCH="RPI"
    - DEFAULT_ARCH=rpi1 make install-docker-deps
    - DEFAULT_ARCH=rpi2 make install-docker-deps
    - DEFAULT_ARCH=rpi3 make install-docker-deps
    - make install-deps-no-envs
    script:
    - make clean
    - DEFAULT_TARGET=rpi1 make build-docker
    - DEFAULT_TARGET=rpi2 make build-docker
    - DEFAULT_TARGET=rpi3 make build-docker
    - make lint
    - make run-docker CMD='make test'
  - stage: Android
    if: branch = release*$
    install:
    - export D_ARCH="Android"
    - DEFAULT_ARCH=android make install-docker-deps
    - make install-deps-no-envs
    script:
    - make clean
    - DEFAULT_TARGET=android make build-docker
    - DEFAULT_TARGET=android-emulator make build-docker
    - make lint
    - make run-docker CMD='make test'
    - make run-docker CMD='make install coveralls ; make test-cover-travis'
  - stage: Linux
    before_install:
    - source ./ci-scripts/install-$TRAVIS_OS_NAME.sh
    install:
    - export D_ARCH="Linux"
    - make install-docker-deps
    - make install-deps-no-envs
    - make install-linters
    before_script:
    - echo "PATH=$PATH";
    - echo "PIP=$PIP";
    - PYTHON=python3 PIP=pip3 make -C tmp/hardware-wallet clean
    - PYTHON=python3 PIP=pip3 make -C tmp/hardware-wallet/tiny-firmware/protob install-deps-nanopb
    - PYTHON=python3 PIP=pip3 make -C tmp/hardware-wallet/tiny-firmware/protob/nanopb/vendor/nanopb/generator/proto
    - PYTHON=python3 PIP=pip3 make -C tmp/hardware-wallet emulator
    - make -C ./tmp/hardware-wallet run-emulator & true;
    - ps aux | grep emulator
    script:
    - make clean
    - DEFAULT_TARGET=linux make build-docker
    - make clean
    - make run-docker CMD='make test'
    - make run-docker CMD='make test-skyhw'
    - make lint
    - make run-docker CMD='make install-coveralls ; make test-cover-travis'
  - stage: MacOS
    os: osx
    osx_image: xcode10.2
    before_install:
    - source ./ci-scripts/install-$TRAVIS_OS_NAME.sh
    install:
    - export D_ARCH="MacOS"
    - make install-deps
    - make install-coveralls
    before_script:
    - echo "PATH=$PATH";
    - echo "PIP=$PIP";
    - ( sudo Xvfb :99 -ac ${XARGS}; echo "Xvfb ok" )& export DISPLAY=:99
    - PYTHON=python3 PIP=pip3 make -C tmp/hardware-wallet clean
    - PYTHON=python3 PIP=pip3 make -C tmp/hardware-wallet/tiny-firmware/protob install-deps-nanopb
    - PYTHON=python3 PIP=pip3 make -C tmp/hardware-wallet/tiny-firmware/protob/nanopb/vendor/nanopb/generator/proto
    - PYTHON=python3 PIP=pip3 make -C tmp/hardware-wallet emulator
    - make -C ./tmp/hardware-wallet run-emulator & true;
    - ps aux | grep emulator
    script:
    - make clean
    - make build
    - make test
    - make test-skyhw
    - make build-icon
    - make lint
    - make test-cover-travis
# FIXME: Restore Windows builds
#    - stage: Windows
#      os: windows
#      env:
#        - QT5_BASE_DIR: C:/Qt/5.13.0/msvc2017
#        - QT_DIR: C:/Qt
#        - QT_QMAKE_DIR: C:/Qt/5.13.0/mingw73_64/bin
#      install:
#        - choco install make -y
#        - choco install unzip -y
#        #- df -h
#        #- .travis/install-qt-win.sh
#        #- df -h
#        #- ls C:/Qt
#        #- ls C:/Qt/5.13.0
#        #- ls C:/Qt/5.13.0/mingw73_64
#        #- ls C:/Qt/5.13.0/mingw73_64/bin
#        - travis_wait 50 make install-deps-Windows
#        - df -h
#        - make install-linters
#        - make install-coveralls
#      script:
#        - make build
#        - make test
#        - make build-icon
#        - make test-cover-travis
notifications:
  email: false
  webhooks:
    urls:
    - https://fathomless-fjord-24024.herokuapp.com/notify
    - https://coveralls.io/webhook
before_deploy:
- export VERSION="$(git describe --tags --exact-match HEAD 2> /dev/null)"
- export ARCH="$(uname -m)"
- export OS="$(uname -s)"
- make prepare-release
- if [[ $D_ARCH == "Linux"  ]]; then DEFAULT_TARGET=linux make build-docker ; else
  echo "False"; fi
- if [[ $D_ARCH == "MacOS"  ]]; then make build; else echo "False"; fi
- "( cd deploy && tar czf ../fibercryptowallet-${VERSION}-${OS}-${ARCH}.tar.gz ./*
  \ )"
- pwd && ls -l .
deploy:
  provider: releases
  api_key:
    secure: d+faEpSLTcV4Xrvmz7D7WOwc5I99zReYxHQJqzixjw4G6qVed30Ra2eUfJ+84kkkuy/xFZKwdR52rZGCeHNxlUr0AeFX385ZuCbVpgyJiHa0h39IckFgOmDei7nUZ43cdAe+GR63W/AePVs+SvKXnh3y+iZMMa2n73AiaX4H8cFLmWPznODW78gED+jmatpKJ43/83/JPhVbliX7nYV61Icgcb1mH6QLNnFMUfxiDZmaRT9lc3xvCZB6cqoKBGf7sAu/bLM9R7VWjr8kBOV8deN9x92vO3p0+ED1s6XS9Ku73wo7VkGsWsqD2c8CMP8F6bHVYx0ixOahKTnRJzHoZVzo1fuMWUev3MxlZwbPVAt4VVVCQxMoj/+ZgQXyPNI6ystPqMpF9q9ot8T6EiwhUITJATtChZqj0nwmlgjS7przGZAe3f1Oj5yFUPk00VAs2qg8UPPHL/tM+gjT0oamqiNr8iNNpmjTLvjbMvaLQLnDSLS0yAnL3nVyfYz//dmkfyhAtKFNu+CxNwGoOptUSdikMEUGows8Q4G0Rw5CmP5+fPOQC71xOQ8l8FX0mNvSQt8sV74MX63xq+eDNOCHdxKHga+ReNNbVK6NFJJLaKatL8E8jD119igB2ZVPuAOCdPTXiQXS+FUjJPCMbmDMgJdWRl+CPQoJwrQjXUqvAGc=
  file: fibercryptowallet-${VERSION}-${OS}-${D_ARCH}.tar.gz
  skip_cleanup: true
  draft: true
  overwrite: true
  on:
    repo: fibercrypto/fibercryptowallet
    tags: true
