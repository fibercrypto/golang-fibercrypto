// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import core "github.com/fibercrypto/fibercryptowallet/src/core"
import mock "github.com/stretchr/testify/mock"

// PEX is an autogenerated mock type for the PEX type
type PEX struct {
	mock.Mock
}

// BroadcastTxn provides a mock function with given fields: txn
func (_m *PEX) BroadcastTxn(txn core.Transaction) error {
	ret := _m.Called(txn)

	var r0 error
	if rf, ok := ret.Get(0).(func(core.Transaction) error); ok {
		r0 = rf(txn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetConnections provides a mock function with given fields:
func (_m *PEX) GetConnections() (core.PexNodeSet, error) {
	ret := _m.Called()

	var r0 core.PexNodeSet
	if rf, ok := ret.Get(0).(func() core.PexNodeSet); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.PexNodeSet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTxnPool provides a mock function with given fields:
func (_m *PEX) GetTxnPool() (core.TransactionIterator, error) {
	ret := _m.Called()

	var r0 core.TransactionIterator
	if rf, ok := ret.Get(0).(func() core.TransactionIterator); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.TransactionIterator)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
